package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate _jp;
    private DbIterator _child1;
    private DbIterator _child2;
    private Tuple t1;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
	this._jp = p;
	this._child1 = child1;
	this._child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this._jp;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return this._child1.getTupleDesc().getFieldName(this._jp.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return this._child2.getTupleDesc().getFieldName(this._jp.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return simpledb.TupleDesc.merge(this._child1.getTupleDesc(), this._child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
	this._child1.open();
	this._child2.open();
	super.open();
	this.t1 = null;
    }

    public void close() {
        // some code goes here
	super.close();
	this._child1.close();
	this._child2.close();
	this.t1 = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
	close();
	open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
	if (t1 == null && !this._child1.hasNext())
		return null;

	while(t1 != null || this._child1.hasNext()){
		while (t1 == null && this._child1.hasNext()){
			t1 = this._child1.next();
			this._child2.rewind();
		}
		while(this._child2.hasNext()){
			Tuple t2 = this._child2.next();
			if (this._jp.filter(this.t1, t2)){
				Tuple t = new Tuple(this.getTupleDesc());
				int t1size = t1.getTupleDesc().numFields();
				int i = 0;
				for (; i < t1size; i++){
					t.setField(i, t1.getField(i));
				}
				for (; i < this.getTupleDesc().numFields(); i++){
					t.setField(i, t2.getField(i-t1size));
				}
				return t;
			}
		}
		if (this._child1.hasNext()){
			this.t1 = this._child1.next();
			this._child2.rewind();
		}
		else
			return null;
	}

        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] { this._child1, this._child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        if (this._child1 != children[0])
        {
            this._child1 = children[0];
        }
	if (this._child2 != children[1])
	{
	    this._child2 = children[1];
	}
    }

}
